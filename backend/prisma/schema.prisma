// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  email            String        @unique
  password         String        @default("")
  verified         Boolean       @default(false)
  verificationCode String?
  isAdmin          Boolean       @default(false)
  adminPasskey     String?
  createdAt        DateTime      @default(now())
  profile          Profile?
  adminProfile     AdminProfile?
}

model Profile {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int              @unique
  name            String
  company         String
  position        String
  avatar          String?
  projectRequests ProjectRequest[]
  projects        Project[]
  createdAt       DateTime         @default(now())
}

model AdminProfile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  name      String
  position  String
  avatar    String?
  createdAt DateTime  @default(now())
  projects  Project[]
}

model ProjectRequest {
  id                Int                      @id @default(autoincrement())
  user              Profile                  @relation(fields: [userId], references: [userId])
  userId            Int
  requestType       RequestType
  status            RequestStatus            @default(NEW)
  ArticleRequest    TechnicalArticleRequest?
  WhitepaperRequest WhitepaperRequest?
  ApiDocRequest     ApiDocRequest?
  EditingRequest    EditingRequest?
  createdAt         DateTime                 @default(now())
}

model TechnicalArticleRequest {
  id               Int            @id @default(autoincrement())
  numberOfArticles Int
  audience         String
  primaryGoal      String
  contentStructure String[]
  idealLength      String
  usefulLinks      String
  proposedTopics   String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model WhitepaperRequest {
  id               Int            @id @default(autoincrement())
  productName      String
  niche            String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model ApiDocRequest {
  id               Int            @id @default(autoincrement())
  startupName      String
  industry         String
  docType          String
  usefulLinks      String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model EditingRequest {
  id               Int            @id @default(autoincrement())
  drafts           String[]
  usefulLinks      String
  info             String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model Project {
  id              Int               @id @default(autoincrement())
  title           String
  description     String
  projectType     String
  startDate       DateTime
  dueDate         DateTime
  owner           Profile           @relation(fields: [ownerId], references: [id])
  ownerId         Int
  assignedPM      AdminProfile      @relation(fields: [assignedPMId], references: [userId])
  assignedPMId    Int
  status          ProjectStatus     @default(PENDING)
  overallProgress Int               @default(0)
  tasks           ProjectTask[]
  activities      ProjectActivity[]
  fee             String
  payments        Payment[]
  files           String[]
  feedback        String[]
  createdAt       DateTime          @default(now())
}

model ProjectTask {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus @default(NEW)
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   Int
  dueDate     DateTime
}

model ProjectActivity {
  id        Int      @id @default(autoincrement())
  activity  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())
}

model Payment {
  id        Int           @id @default(autoincrement())
  title     String
  amount    String
  dueDate   DateTime
  status    PaymentStatus
  datePaid  DateTime?
  Project   Project       @relation(fields: [projectId], references: [id])
  projectId Int
  invoiceId String
  invoice   String?
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

enum RequestStatus {
  NEW
  STARTED
}

enum RequestType {
  TECHNICAL_ARTICLE
  WHITEPAPER
  API_DOC
  EDITING
}

enum TaskStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum PaymentStatus {
  PAID
  PENDING
}
