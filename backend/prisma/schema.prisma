// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String   @default("")
  verified         Boolean  @default(false)
  verificationCode String?
  isAdmin          Boolean  @default(false)
  adminPasskey     String?
  createdAt        DateTime @default(now())
  profile          Profile?
}

model Profile {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int              @unique
  name            String
  company         String
  position        String
  avatar          String?
  projectRequests ProjectRequest[]
  createdAt       DateTime         @default(now())
}

model ProjectRequest {
  id                Int                      @id @default(autoincrement())
  user              Profile                  @relation(fields: [userId], references: [userId])
  userId            Int
  requestType       RequestType
  status            RequestStatus            @default(NEW)
  ArticleRequest    TechnicalArticleRequest?
  WhitepaperRequest WhitepaperRequest?
  ApiDocRequest     ApiDocRequest?
  EditingRequest    EditingRequest?
  createdAt         DateTime                 @default(now())
}

model TechnicalArticleRequest {
  id               Int            @id @default(autoincrement())
  numberOfArticles Int
  audience         String
  primaryGoal      String
  contentStructure String[]
  idealLength      String
  usefulLinks      String
  proposedTopics   String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model WhitepaperRequest {
  id               Int            @id @default(autoincrement())
  productName      String
  niche            String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model ApiDocRequest {
  id               Int            @id @default(autoincrement())
  startupName      String
  industry         String
  docType          String
  usefulLinks      String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

model EditingRequest {
  id               Int            @id @default(autoincrement())
  drafts           String[]
  usefulLinks      String
  info             String
  projectrequest   ProjectRequest @relation(fields: [projectRequestId], references: [id])
  projectRequestId Int            @unique
  createdAt        DateTime       @default(now())
}

enum RequestStatus {
  NEW
  STARTED
}

enum RequestType {
  TECHNICAL_ARTICLE
  WHITEPAPER
  API_DOC
  EDITING
}
