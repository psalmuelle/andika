// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  password         String          @default("")
  verified         Boolean         @default(false)
  verificationCode String?
  profile          Profile?
  projects         Project[]
  paymentDetails   PaymentDetail[]
  referrals        Refferal[]
  notifications    Notification[]
  ratings          Rating[]
  messages         Message[]
}

model Profile {
  id           Int      @id @default(autoincrement())
  name         String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  company      String
  position     String
  refferalCode String   @unique
  refferedBy   String?
  createdAt    DateTime @default(now())
}

model Admin {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  message  Message[]
}

model Project {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  type            ProjectType
  industry        String
  budget          Float?
  todos           ProjectTodo[]
  deliverables    Deliverable[]
  paymentTimeline PaymentTimeline[]
  payments        PaymentDetail[]
  status          ProjectStatus     @default(OPEN)
  createdAt       DateTime          @default(now())
}

model ProjectTodo {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  type      String
  quantity  Int
}

model Deliverable {
  id          Int             @id @default(autoincrement())
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   Int
  type        DeliverableType
  title       String
  description String
  content     String
  status      String
  eta         DateTime
  createdAt   DateTime        @default(now())
}

model PaymentTimeline {
  id         Int             @id @default(autoincrement())
  project    Project         @relation(fields: [projectId], references: [id])
  projectId  Int
  percentage Float
  amount     Float
  dueDate    DateTime
  payment    PaymentDetail[]
}

model PaymentDetail {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  project   Project         @relation(fields: [projectId], references: [id])
  projectId Int
  invoice   PaymentTimeline @relation(fields: [invoiceId], references: [id])
  invoiceId Int
  method    String
  tnxId     String
  status    String
  amount    Float
  date      DateTime
  createdAt DateTime        @default(now())
}

model Rating {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  rating       Int      @default(0)
  comment      String
  improvements String
  createdAt    DateTime @default(now())
}

model Refferal {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  refferedUser Int
  status       ReferralStatus @default(PENDING)
  createdAt    DateTime       @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id        Int           @id @default(autoincrement())
  user      User?         @relation(fields: [userId], references: [id])
  userId    Int?
  Admin     Admin?        @relation(fields: [adminId], references: [id])
  adminId   Int?
  content   String?
  status    MessageStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageStatus {
  PENDING
  DELIVERED
  READ
}

enum ProjectType {
  SHORT_TERM
  STARTUP
  ENTERPRISE
}

enum ProjectStatus {
  OPEN
  CLOSED
}

enum DeliverableType {
  ARTICLE
  API_DOCUMENTATION
  TECHNICAL_DOCUMENTATION
  WHITEPAPER
}
